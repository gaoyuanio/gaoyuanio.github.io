{
    "version": "https://jsonfeed.org/version/1",
    "title": "浅岛夏风 • All posts by \"移动端\" category",
    "description": "一枚微不足道的前端攻城狮",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/04/25/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94%E2%80%94%E2%80%94%E6%89%8B%E6%B7%98flexible/",
            "url": "http://example.com/2021/04/25/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94%E2%80%94%E2%80%94%E6%89%8B%E6%B7%98flexible/",
            "title": "移动端自适应——手淘flexible",
            "date_published": "2021-04-25T03:21:51.000Z",
            "content_html": "<h2 id=\"移动端自适应手淘flexible\"><a class=\"markdownIt-Anchor\" href=\"#移动端自适应手淘flexible\">#</a> 移动端自适应 —— 手淘 flexible</h2>\n<p>熟悉移动端的自适应方案的朋友对 rem 适应方案，肯定不陌生，最出名的就是阿里的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZmUvbGliLWZsZXhpYmxl\">lib-flexible</span> 方案。</p>\n<p>** 原理：**flexible 就是根据不同的屏幕算出 html 的 font-size，通过 js 来动态写 meta 标签。</p>\n<p>事实上他做了这几样事情：</p>\n<ul>\n<li>动态改写 <code>&lt;meta&gt;</code>  标签</li>\n<li>给 <code>&lt;html&gt;</code>  元素添加 <code>data-dpr</code>  属性，并且动态改写 <code>data-dpr</code>  的值</li>\n<li>给 <code>&lt;html&gt;</code>  元素添加 <code>font-size</code>  属性，并且动态改写 <code>font-size</code>  的值</li>\n</ul>\n<p>比如我们在做移动端的时候，经常拿到的设计稿是 640px 或者 750px。自己项目中就是 640px，以此为例，自己在项目中为了计算方便，所以给 html 根元素设置的字体大小是 100px，也就是在 640px 下面。这里注意，我们给 html 设置 100px，这个是字体哦，所以最好在 body 设置一下字体大小。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 设置html元素的字体大小为100px</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 所有的像素我们直接除以</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">640px  ——  6.4rem</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">64px —— 0.64rem</span><br></pre></td></tr></table></figure>\n<p>那么如果 64px，对应我们写 rem 就是 0.64rem，也不需要动用计算器去计算 rem，需要多强的大脑呀（虽然有很多插件帮我们）</p>\n<p>修改 flexible.js。640px 下面的 10 就变成 6.4</p>\n<p>![image-20210425112100315](/Users/gaoyuan/Library/Application Support/typora-user-images/image-20210425112100315.png)</p>\n<p>这样，我们页面直接把 px 换算成 rem，就可以实现自适应。（记住，自己这里以 640px 设计稿为基础，如果是 750px 就是除以 7.5）。</p>\n<p><strong>字号不使用 rem</strong></p>\n<p>我们都知道 chrome 的最小显示的字体是 12px，如果字体用 rem，计算出来小于 12px，那么就也会以 12px 显示，而且我们不希望出现 13px 或者 15px 这样的奇葩尺寸，所以字体最好是用 px 来表示，至于适应，我们可以写媒体查询。</p>\n<h2 id=\"vue中使用rem\"><a class=\"markdownIt-Anchor\" href=\"#vue中使用rem\">#</a> vue 中使用 rem</h2>\n<p>vue 现在正是火的势头上，作者说明年估计 3.0 要出来了。那么在 vue 我们如果做移动端自适应怎么弄呢？</p>\n<p><strong>安装 flexible</strong></p>\n<p><em>在命令行中运行如下安装：</em></p>\n<blockquote>\n<p>npm i lib-flexible --save-dev</p>\n</blockquote>\n<p><strong>引入 flexible</strong></p>\n<p><em>在项目入口文件 main.js 里 引入 lib-flexible</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;lib-flexible&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>对于我们的 index.html，最好是不要 meta 标签，flexible 会自动添加上的，因为有一个判断。当然了，懒惰果然是最大的生产力，有的人觉得换算 rem 太麻烦，就出现了插件<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcHgycmVtLWxvYWRlcg==\"> px2rem-loader</span>，把 px 自动转化为对应的 rem。但是呢，麻烦的就是如果引入外部的 css 文件，那么也会把 px 转化为 rem。自己在项目中就是手动计算 rem，用上面的方法，直接除以 100，这个应该很简单吧，都是程序员，数学这个还是可以吧…</p>\n",
            "tags": [
                "移动端"
            ]
        }
    ]
}