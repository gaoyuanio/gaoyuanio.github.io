<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>浅岛夏风 • Posts by &#34;axios&#34; tag</title>
        <link>http://example.com</link>
        <description>一枚微不足道的前端攻城狮</description>
        <language>zh-CN</language>
        <pubDate>Mon, 29 Mar 2021 20:09:53 +0800</pubDate>
        <lastBuildDate>Mon, 29 Mar 2021 20:09:53 +0800</lastBuildDate>
        <category>javascript</category>
        <category>HTTP</category>
        <category>vue</category>
        <category>MySQL</category>
        <category>vuex</category>
        <category>webpack</category>
        <category>axios</category>
        <category>Hbuilder</category>
        <category>AJAX</category>
        <category>CSS</category>
        <category>react</category>
        <category>note</category>
        <category>移动端</category>
        <item>
            <guid isPermalink="true">http://example.com/2021/03/29/vue%E9%87%8C%E5%B0%81%E8%A3%85axios%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8promise%E6%97%A0%E7%97%9B%E5%88%B7%E6%96%B0token/</guid>
            <title>vue里封装axios——利用promise无痛刷新token</title>
            <link>http://example.com/2021/03/29/vue%E9%87%8C%E5%B0%81%E8%A3%85axios%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8promise%E6%97%A0%E7%97%9B%E5%88%B7%E6%96%B0token/</link>
            <category>vue</category>
            <category>axios</category>
            <pubDate>Mon, 29 Mar 2021 20:09:53 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;需求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#需求&#34;&gt;#&lt;/a&gt; 需求&lt;/h2&gt;
&lt;p&gt;最近遇到个需求：前端登录后，后端返回 &lt;code&gt;token&lt;/code&gt;  和 &lt;code&gt;token有效时间&lt;/code&gt; ，当 token 过期时要求用旧 token 去获取新的 token，前端需要做到无痛刷新 &lt;code&gt;token&lt;/code&gt; ，即请求刷新 token 时要做到用户无感知。&lt;/p&gt;
&lt;h2 id=&#34;需求解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#需求解析&#34;&gt;#&lt;/a&gt; 需求解析&lt;/h2&gt;
&lt;p&gt;当用户发起一个请求时，判断 token 是否已过期，若已过期则先调 &lt;code&gt;refreshToken&lt;/code&gt;  接口，拿到新的 token 后再继续执行之前的请求。&lt;/p&gt;
&lt;p&gt;这个问题的难点在于：当同时发起多个请求，而刷新 token 的接口还没返回，此时其他请求该如何处理？接下来会循序渐进地分享一下整个过程。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;实现思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现思路&#34;&gt;#&lt;/a&gt; 实现思路&lt;/h2&gt;
&lt;p&gt;由于后端返回了 token 的有效时间，可以有两种方法：&lt;/p&gt;
&lt;h3 id=&#34;方法一&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法一&#34;&gt;#&lt;/a&gt; 方法一：&lt;/h3&gt;
&lt;p&gt;在请求发起前拦截每个请求，判断 token 的有效时间是否已经过期，若已过期，则将请求挂起，先刷新 token 后再继续请求。&lt;/p&gt;
&lt;h3 id=&#34;方法二&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法二&#34;&gt;#&lt;/a&gt; 方法二：&lt;/h3&gt;
&lt;p&gt;不在请求前拦截，而是拦截返回后的数据。先发起请求，接口返回过期后，先刷新 token，再进行一次重试。&lt;/p&gt;
&lt;h3 id=&#34;两种方法对比&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#两种方法对比&#34;&gt;#&lt;/a&gt; 两种方法对比&lt;/h3&gt;
&lt;p&gt;方法一&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点： 在请求前拦截，能节省请求，省流量。&lt;/li&gt;
&lt;li&gt;缺点： 需要后端额外提供一个 token 过期时间的字段；使用了本地时间判断，若本地时间被篡改，特别是本地时间比服务器时间慢时，拦截会失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：token 有效时间建议是时间段，类似缓存的 MaxAge，而不要是绝对时间。当服务器和本地时间不一致时，绝对时间会有问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;方法二&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：不需额外的 token 过期字段，不需判断时间。&lt;/li&gt;
&lt;li&gt;缺点： 会消耗多一次请求，耗流量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，方法一和二优缺点是互补的，方法一有校验失败的风险（本地时间被篡改时，当然一般没有用户闲的蛋疼去改本地时间的啦），方法二更简单粗暴，等知道服务器已经过期了再重试一次，只是会耗多一个请求。&lt;/p&gt;
&lt;p&gt;在这里博主选择了 &lt;em&gt;方法二&lt;/em&gt;。&lt;/p&gt;
&lt;h2 id=&#34;实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现&#34;&gt;#&lt;/a&gt; 实现&lt;/h2&gt;
&lt;p&gt;这里会使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9z&#34;&gt; axios&lt;/span&gt; 来实现，方法一是请求前拦截，所以会使用 &lt;code&gt;axios.interceptors.request.use()&lt;/code&gt;  这个方法；&lt;/p&gt;
&lt;p&gt;而方法二是请求后拦截，所以会使用 &lt;code&gt;axios.interceptors.response.use()&lt;/code&gt;  方法。&lt;/p&gt;
&lt;h3 id=&#34;封装axios基本骨架&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#封装axios基本骨架&#34;&gt;#&lt;/a&gt; 封装 axios 基本骨架&lt;/h3&gt;
&lt;p&gt;首先说明一下，项目中的 token 是存在 &lt;code&gt;localStorage&lt;/code&gt;  中的。 &lt;code&gt;request.js&lt;/code&gt;  基本骨架:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import axios from &amp;#x27;axios&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 从localStorage中获取token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function getLocalToken () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const token = window.localStorage.getItem(&amp;#x27;token&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 给实例添加一个setToken方法，用于登录后将最新token动态添加到header，同时将token保存在localStorage中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.setToken = (token) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  instance.defaults.headers[&amp;#x27;X-Token&amp;#x27;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  window.localStorage.setItem(&amp;#x27;token&amp;#x27;, token)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 创建一个axios实例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const instance = axios.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  baseURL: &amp;#x27;/api&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  timeout: 300000,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  headers: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;X-Token&amp;#x27;: getLocalToken() // headers塞token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 拦截返回的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.interceptors.response.use(response =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  // 接下来会在这里进行token过期的逻辑处理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return response&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, error =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return Promise.reject(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default instance&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个是项目中一般的 axios 实例的封装，创建实例时，将本地已有的 token 放进 header，然后 export 出去供调用。接下来就是如何拦截返回的数据啦。&lt;/p&gt;
&lt;h3 id=&#34;instanceinterceptorsresponseuse拦截实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#instanceinterceptorsresponseuse拦截实现&#34;&gt;#&lt;/a&gt; instance.interceptors.response.use 拦截实现&lt;/h3&gt;
&lt;p&gt;后端接口一般会有一个约定好的数据结构，如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;code: 1234, message: &amp;#x27;token过期&amp;#x27;, data: &amp;#123;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如我这里，后端约定当 &lt;code&gt;code === 1234&lt;/code&gt;  时表示 token 过期了，此时就要求刷新 token。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;instance.interceptors.response.use(response =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const &amp;#123; code &amp;#125; = response.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (code === 1234) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // 说明token过期了,刷新token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return refreshToken().then(res =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      // 刷新token成功，将最新的token更新到header中，同时保存在localStorage中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      const &amp;#123; token &amp;#125; = res.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      instance.setToken(token)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      // 获取当前失败的请求&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      const config = response.config&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      // 重置一下配置&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      config.headers[&amp;#x27;X-Token&amp;#x27;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      config.baseURL = &amp;#x27;&amp;#x27; // url已经带上了/api，避免出现/api/api的情况&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      // 重试当前请求并返回promise&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      return instance(config)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;).catch(res =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      console.error(&amp;#x27;refreshtoken error =&amp;gt;&amp;#x27;, res)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      //刷新token失败，神仙也救不了了，跳转到首页重新登录吧&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      window.location.href = &amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return response&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, error =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return Promise.reject(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function refreshToken () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // instance是当前request.js中已创建的axios实例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return instance.post(&amp;#x27;/refreshtoken&amp;#x27;).then(res =&amp;gt; res.data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里需要额外注意的是， &lt;code&gt;response.config&lt;/code&gt;  就是原请求的配置，但这个是已经处理过了的， &lt;code&gt;config.url&lt;/code&gt;  已经带上了 &lt;code&gt;baseUrl&lt;/code&gt; ，因此重试时需要去掉，同时 token 也是旧的，需要刷新下。&lt;/p&gt;
&lt;p&gt;以上就基本做到了无痛刷新 token，当 token 正常时，正常返回，当 token 已过期，则 axios 内部进行一次刷新 token 和重试。对调用者来说，axios 内部的刷新 token 是一个黑盒，是无感知的，因此需求已经做到了。&lt;/p&gt;
&lt;h2 id=&#34;问题和优化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#问题和优化&#34;&gt;#&lt;/a&gt; 问题和优化&lt;/h2&gt;
&lt;p&gt;上面的代码还是存在一些问题的，没有考虑到多次请求的问题，因此需要进一步优化。&lt;/p&gt;
&lt;h3 id=&#34;如何防止多次刷新token&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何防止多次刷新token&#34;&gt;#&lt;/a&gt; 如何防止多次刷新 token&lt;/h3&gt;
&lt;p&gt;如果 refreshToken 接口还没返回，此时再有一个过期的请求进来，上面的代码就会再一次执行 refreshToken，这就会导致多次执行刷新 token 的接口，因此需要防止这个问题。我们可以在 &lt;code&gt;request.js&lt;/code&gt;  中用一个 &lt;code&gt;flag&lt;/code&gt;  来标记当前是否正在刷新 token 的状态，如果正在刷新则不再调用刷新 token 的接口。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 是否正在刷新的标记&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let isRefreshing = false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.interceptors.response.use(response =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const &amp;#123; code &amp;#125; = response.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (code === 1234) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (!isRefreshing) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      isRefreshing = true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      return refreshToken().then(res =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        const &amp;#123; token &amp;#125; = res.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        instance.setToken(token)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        const config = response.config&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        config.headers[&amp;#x27;X-Token&amp;#x27;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        config.baseURL = &amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return instance(config)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;).catch(res =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.error(&amp;#x27;refreshtoken error =&amp;gt;&amp;#x27;, res)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        window.location.href = &amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;).finally(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        isRefreshing = false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return response&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, error =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return Promise.reject(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样子就可以避免在刷新 token 时再进入方法了。但是这种做法是相当于把其他失败的接口给舍弃了，假如同时发起两个请求，且几乎同时返回，第一个请求肯定是进入了 refreshToken 后再重试，而第二个请求则被丢弃了，仍是返回失败，所以接下来还得解决其他接口的重试问题。&lt;/p&gt;
&lt;h3 id=&#34;同时发起两个或以上的请求时其他接口如何重试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同时发起两个或以上的请求时其他接口如何重试&#34;&gt;#&lt;/a&gt; 同时发起两个或以上的请求时，其他接口如何重试&lt;/h3&gt;
&lt;p&gt;两个接口几乎同时发起和返回，第一个接口会进入刷新 token 后重试的流程，而第二个接口需要先存起来，然后等刷新 token 后再重试。同样，如果同时发起三个请求，此时需要缓存后两个接口，等刷新 token 后再重试。由于接口都是异步的，处理起来会有点麻烦。&lt;/p&gt;
&lt;p&gt;当第二个过期的请求进来，token 正在刷新，我们先将这个请求存到一个数组队列中，想办法让这个请求处于等待中，一直等到刷新 token 后再逐个重试清空请求队列。&lt;br&gt;
那么如何做到让这个请求处于等待中呢？为了解决这个问题，我们得借助 &lt;code&gt;Promise&lt;/code&gt; 。将请求存进队列中后，同时返回一个 &lt;code&gt;Promise&lt;/code&gt; ，让这个 &lt;code&gt;Promise&lt;/code&gt;  一直处于 &lt;code&gt;Pending&lt;/code&gt;  状态（即不调用 resolve），此时这个请求就会一直等啊等，只要我们不执行 resolve，这个请求就会一直在等待。当刷新请求的接口返回来后，我们再调用 resolve，逐个重试。最终代码：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// 是否正在刷新的标记&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let isRefreshing = false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 重试队列，每一项将是一个待执行的函数形式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let requests = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.interceptors.response.use(response =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const &amp;#123; code &amp;#125; = response.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (code === 1234) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const config = response.config&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (!isRefreshing) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      isRefreshing = true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      return refreshToken().then(res =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        const &amp;#123; token &amp;#125; = res.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        instance.setToken(token)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        config.headers[&amp;#x27;X-Token&amp;#x27;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        config.baseURL = &amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 已经刷新了token，将所有队列中的请求进行重试&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        requests.forEach(cb =&amp;gt; cb(token))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 重试完了别忘了清空这个队列（掘金评论区同学指点）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        requests = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return instance(config)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;).catch(res =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.error(&amp;#x27;refreshtoken error =&amp;gt;&amp;#x27;, res)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        window.location.href = &amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;).finally(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        isRefreshing = false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      // 正在刷新token，返回一个未执行resolve的promise&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      return new Promise((resolve) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        requests.push((token) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          config.baseURL = &amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          config.headers[&amp;#x27;X-Token&amp;#x27;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          resolve(instance(config))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return response&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, error =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return Promise.reject(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里可能比较难理解的是 &lt;code&gt;requests&lt;/code&gt;  这个队列中保存的是一个函数，这是为了让 resolve 不执行，先存起来，等刷新 token 后更方便调用这个函数使得 resolve 执行。至此，问题应该都解决了。&lt;/p&gt;
&lt;h2 id=&#34;最后完整代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最后完整代码&#34;&gt;#&lt;/a&gt; 最后完整代码&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import axios from &amp;#x27;axios&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 从localStorage中获取token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function getLocalToken () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const token = window.localStorage.getItem(&amp;#x27;token&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 给实例添加一个setToken方法，用于登录后将最新token动态添加到header，同时将token保存在localStorage中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.setToken = (token) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  instance.defaults.headers[&amp;#x27;X-Token&amp;#x27;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  window.localStorage.setItem(&amp;#x27;token&amp;#x27;, token)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function refreshToken () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    // instance是当前request.js中已创建的axios实例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return instance.post(&amp;#x27;/refreshtoken&amp;#x27;).then(res =&amp;gt; res.data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 创建一个axios实例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const instance = axios.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  baseURL: &amp;#x27;/api&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  timeout: 300000,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  headers: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;Content-Type&amp;#x27;: &amp;#x27;application/json&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;X-Token&amp;#x27;: getLocalToken() // headers塞token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 是否正在刷新的标记&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let isRefreshing = false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// 重试队列，每一项将是一个待执行的函数形式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;let requests = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instance.interceptors.response.use(response =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  const &amp;#123; code &amp;#125; = response.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (code === 1234) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    const config = response.config&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (!isRefreshing) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      isRefreshing = true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      return refreshToken().then(res =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        const &amp;#123; token &amp;#125; = res.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        instance.setToken(token)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        config.headers[&amp;#x27;X-Token&amp;#x27;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        config.baseURL = &amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 已经刷新了token，将所有队列中的请求进行重试&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        requests.forEach(cb =&amp;gt; cb(token))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        requests = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return instance(config)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;).catch(res =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        console.error(&amp;#x27;refreshtoken error =&amp;gt;&amp;#x27;, res)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        window.location.href = &amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;).finally(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        isRefreshing = false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      // 正在刷新token，将返回一个未执行resolve的promise&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      return new Promise((resolve) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        requests.push((token) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          config.baseURL = &amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          config.headers[&amp;#x27;X-Token&amp;#x27;] = token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          resolve(instance(config))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return response&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, error =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return Promise.reject(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export default instance&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;希望对大家有帮助。感谢看到最后&lt;sup&gt;_&lt;/sup&gt;。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
