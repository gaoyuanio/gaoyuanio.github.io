{
    "version": "https://jsonfeed.org/version/1",
    "title": "浅岛夏风 • All posts by \"axios\" tag",
    "description": "一枚微不足道的前端攻城狮",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/03/29/vue%E9%87%8C%E5%B0%81%E8%A3%85axios%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8promise%E6%97%A0%E7%97%9B%E5%88%B7%E6%96%B0token/",
            "url": "http://example.com/2021/03/29/vue%E9%87%8C%E5%B0%81%E8%A3%85axios%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8promise%E6%97%A0%E7%97%9B%E5%88%B7%E6%96%B0token/",
            "title": "vue里封装axios——利用promise无痛刷新token",
            "date_published": "2021-03-29T12:09:53.000Z",
            "content_html": "<h2 id=\"需求\"><a class=\"markdownIt-Anchor\" href=\"#需求\">#</a> 需求</h2>\n<p>最近遇到个需求：前端登录后，后端返回 <code>token</code>  和 <code>token有效时间</code> ，当 token 过期时要求用旧 token 去获取新的 token，前端需要做到无痛刷新 <code>token</code> ，即请求刷新 token 时要做到用户无感知。</p>\n<h2 id=\"需求解析\"><a class=\"markdownIt-Anchor\" href=\"#需求解析\">#</a> 需求解析</h2>\n<p>当用户发起一个请求时，判断 token 是否已过期，若已过期则先调 <code>refreshToken</code>  接口，拿到新的 token 后再继续执行之前的请求。</p>\n<p>这个问题的难点在于：当同时发起多个请求，而刷新 token 的接口还没返回，此时其他请求该如何处理？接下来会循序渐进地分享一下整个过程。</p>\n<span id=\"more\"></span>\n<h2 id=\"实现思路\"><a class=\"markdownIt-Anchor\" href=\"#实现思路\">#</a> 实现思路</h2>\n<p>由于后端返回了 token 的有效时间，可以有两种方法：</p>\n<h3 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\">#</a> 方法一：</h3>\n<p>在请求发起前拦截每个请求，判断 token 的有效时间是否已经过期，若已过期，则将请求挂起，先刷新 token 后再继续请求。</p>\n<h3 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\">#</a> 方法二：</h3>\n<p>不在请求前拦截，而是拦截返回后的数据。先发起请求，接口返回过期后，先刷新 token，再进行一次重试。</p>\n<h3 id=\"两种方法对比\"><a class=\"markdownIt-Anchor\" href=\"#两种方法对比\">#</a> 两种方法对比</h3>\n<p>方法一</p>\n<ul>\n<li>优点： 在请求前拦截，能节省请求，省流量。</li>\n<li>缺点： 需要后端额外提供一个 token 过期时间的字段；使用了本地时间判断，若本地时间被篡改，特别是本地时间比服务器时间慢时，拦截会失败。</li>\n</ul>\n<blockquote>\n<p>PS：token 有效时间建议是时间段，类似缓存的 MaxAge，而不要是绝对时间。当服务器和本地时间不一致时，绝对时间会有问题。</p>\n</blockquote>\n<p>方法二</p>\n<ul>\n<li>优点：不需额外的 token 过期字段，不需判断时间。</li>\n<li>缺点： 会消耗多一次请求，耗流量。</li>\n</ul>\n<p>综上，方法一和二优缺点是互补的，方法一有校验失败的风险（本地时间被篡改时，当然一般没有用户闲的蛋疼去改本地时间的啦），方法二更简单粗暴，等知道服务器已经过期了再重试一次，只是会耗多一个请求。</p>\n<p>在这里博主选择了 <em>方法二</em>。</p>\n<h2 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"#实现\">#</a> 实现</h2>\n<p>这里会使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9z\"> axios</span> 来实现，方法一是请求前拦截，所以会使用 <code>axios.interceptors.request.use()</code>  这个方法；</p>\n<p>而方法二是请求后拦截，所以会使用 <code>axios.interceptors.response.use()</code>  方法。</p>\n<h3 id=\"封装axios基本骨架\"><a class=\"markdownIt-Anchor\" href=\"#封装axios基本骨架\">#</a> 封装 axios 基本骨架</h3>\n<p>首先说明一下，项目中的 token 是存在 <code>localStorage</code>  中的。 <code>request.js</code>  基本骨架:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from &#x27;axios&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 从localStorage中获取token</span><br><span class=\"line\">function getLocalToken () &#123;</span><br><span class=\"line\">    const token = window.localStorage.getItem(&#x27;token&#x27;)</span><br><span class=\"line\">    return token</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 给实例添加一个setToken方法，用于登录后将最新token动态添加到header，同时将token保存在localStorage中</span><br><span class=\"line\">instance.setToken = (token) =&gt; &#123;</span><br><span class=\"line\">  instance.defaults.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">  window.localStorage.setItem(&#x27;token&#x27;, token)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个axios实例</span><br><span class=\"line\">const instance = axios.create(&#123;</span><br><span class=\"line\">  baseURL: &#x27;/api&#x27;,</span><br><span class=\"line\">  timeout: 300000,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,</span><br><span class=\"line\">    &#x27;X-Token&#x27;: getLocalToken() // headers塞token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 拦截返回的数据</span><br><span class=\"line\">instance.interceptors.response.use(response =&gt; &#123;</span><br><span class=\"line\">  // 接下来会在这里进行token过期的逻辑处理</span><br><span class=\"line\">  return response</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  return Promise.reject(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default instance</span><br></pre></td></tr></table></figure>\n<p>这个是项目中一般的 axios 实例的封装，创建实例时，将本地已有的 token 放进 header，然后 export 出去供调用。接下来就是如何拦截返回的数据啦。</p>\n<h3 id=\"instanceinterceptorsresponseuse拦截实现\"><a class=\"markdownIt-Anchor\" href=\"#instanceinterceptorsresponseuse拦截实现\">#</a> instance.interceptors.response.use 拦截实现</h3>\n<p>后端接口一般会有一个约定好的数据结构，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;code: 1234, message: &#x27;token过期&#x27;, data: &#123;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>如我这里，后端约定当 <code>code === 1234</code>  时表示 token 过期了，此时就要求刷新 token。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instance.interceptors.response.use(response =&gt; &#123;</span><br><span class=\"line\">  const &#123; code &#125; = response.data</span><br><span class=\"line\">  if (code === 1234) &#123;</span><br><span class=\"line\">    // 说明token过期了,刷新token</span><br><span class=\"line\">    return refreshToken().then(res =&gt; &#123;</span><br><span class=\"line\">      // 刷新token成功，将最新的token更新到header中，同时保存在localStorage中</span><br><span class=\"line\">      const &#123; token &#125; = res.data</span><br><span class=\"line\">      instance.setToken(token)</span><br><span class=\"line\">      // 获取当前失败的请求</span><br><span class=\"line\">      const config = response.config</span><br><span class=\"line\">      // 重置一下配置</span><br><span class=\"line\">      config.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">      config.baseURL = &#x27;&#x27; // url已经带上了/api，避免出现/api/api的情况</span><br><span class=\"line\">      // 重试当前请求并返回promise</span><br><span class=\"line\">      return instance(config)</span><br><span class=\"line\">    &#125;).catch(res =&gt; &#123;</span><br><span class=\"line\">      console.error(&#x27;refreshtoken error =&gt;&#x27;, res)</span><br><span class=\"line\">      //刷新token失败，神仙也救不了了，跳转到首页重新登录吧</span><br><span class=\"line\">      window.location.href = &#x27;/&#x27;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return response</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  return Promise.reject(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">function refreshToken () &#123;</span><br><span class=\"line\">    // instance是当前request.js中已创建的axios实例</span><br><span class=\"line\">    return instance.post(&#x27;/refreshtoken&#x27;).then(res =&gt; res.data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要额外注意的是， <code>response.config</code>  就是原请求的配置，但这个是已经处理过了的， <code>config.url</code>  已经带上了 <code>baseUrl</code> ，因此重试时需要去掉，同时 token 也是旧的，需要刷新下。</p>\n<p>以上就基本做到了无痛刷新 token，当 token 正常时，正常返回，当 token 已过期，则 axios 内部进行一次刷新 token 和重试。对调用者来说，axios 内部的刷新 token 是一个黑盒，是无感知的，因此需求已经做到了。</p>\n<h2 id=\"问题和优化\"><a class=\"markdownIt-Anchor\" href=\"#问题和优化\">#</a> 问题和优化</h2>\n<p>上面的代码还是存在一些问题的，没有考虑到多次请求的问题，因此需要进一步优化。</p>\n<h3 id=\"如何防止多次刷新token\"><a class=\"markdownIt-Anchor\" href=\"#如何防止多次刷新token\">#</a> 如何防止多次刷新 token</h3>\n<p>如果 refreshToken 接口还没返回，此时再有一个过期的请求进来，上面的代码就会再一次执行 refreshToken，这就会导致多次执行刷新 token 的接口，因此需要防止这个问题。我们可以在 <code>request.js</code>  中用一个 <code>flag</code>  来标记当前是否正在刷新 token 的状态，如果正在刷新则不再调用刷新 token 的接口。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 是否正在刷新的标记</span><br><span class=\"line\">let isRefreshing = false</span><br><span class=\"line\">instance.interceptors.response.use(response =&gt; &#123;</span><br><span class=\"line\">  const &#123; code &#125; = response.data</span><br><span class=\"line\">  if (code === 1234) &#123;</span><br><span class=\"line\">    if (!isRefreshing) &#123;</span><br><span class=\"line\">      isRefreshing = true</span><br><span class=\"line\">      return refreshToken().then(res =&gt; &#123;</span><br><span class=\"line\">        const &#123; token &#125; = res.data</span><br><span class=\"line\">        instance.setToken(token)</span><br><span class=\"line\">        const config = response.config</span><br><span class=\"line\">        config.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">        config.baseURL = &#x27;&#x27;</span><br><span class=\"line\">        return instance(config)</span><br><span class=\"line\">      &#125;).catch(res =&gt; &#123;</span><br><span class=\"line\">        console.error(&#x27;refreshtoken error =&gt;&#x27;, res)</span><br><span class=\"line\">        window.location.href = &#x27;/&#x27;</span><br><span class=\"line\">      &#125;).finally(() =&gt; &#123;</span><br><span class=\"line\">        isRefreshing = false</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return response</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  return Promise.reject(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样子就可以避免在刷新 token 时再进入方法了。但是这种做法是相当于把其他失败的接口给舍弃了，假如同时发起两个请求，且几乎同时返回，第一个请求肯定是进入了 refreshToken 后再重试，而第二个请求则被丢弃了，仍是返回失败，所以接下来还得解决其他接口的重试问题。</p>\n<h3 id=\"同时发起两个或以上的请求时其他接口如何重试\"><a class=\"markdownIt-Anchor\" href=\"#同时发起两个或以上的请求时其他接口如何重试\">#</a> 同时发起两个或以上的请求时，其他接口如何重试</h3>\n<p>两个接口几乎同时发起和返回，第一个接口会进入刷新 token 后重试的流程，而第二个接口需要先存起来，然后等刷新 token 后再重试。同样，如果同时发起三个请求，此时需要缓存后两个接口，等刷新 token 后再重试。由于接口都是异步的，处理起来会有点麻烦。</p>\n<p>当第二个过期的请求进来，token 正在刷新，我们先将这个请求存到一个数组队列中，想办法让这个请求处于等待中，一直等到刷新 token 后再逐个重试清空请求队列。<br>\n那么如何做到让这个请求处于等待中呢？为了解决这个问题，我们得借助 <code>Promise</code> 。将请求存进队列中后，同时返回一个 <code>Promise</code> ，让这个 <code>Promise</code>  一直处于 <code>Pending</code>  状态（即不调用 resolve），此时这个请求就会一直等啊等，只要我们不执行 resolve，这个请求就会一直在等待。当刷新请求的接口返回来后，我们再调用 resolve，逐个重试。最终代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 是否正在刷新的标记</span><br><span class=\"line\">let isRefreshing = false</span><br><span class=\"line\">// 重试队列，每一项将是一个待执行的函数形式</span><br><span class=\"line\">let requests = []</span><br><span class=\"line\"></span><br><span class=\"line\">instance.interceptors.response.use(response =&gt; &#123;</span><br><span class=\"line\">  const &#123; code &#125; = response.data</span><br><span class=\"line\">  if (code === 1234) &#123;</span><br><span class=\"line\">    const config = response.config</span><br><span class=\"line\">    if (!isRefreshing) &#123;</span><br><span class=\"line\">      isRefreshing = true</span><br><span class=\"line\">      return refreshToken().then(res =&gt; &#123;</span><br><span class=\"line\">        const &#123; token &#125; = res.data</span><br><span class=\"line\">        instance.setToken(token)</span><br><span class=\"line\">        config.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">        config.baseURL = &#x27;&#x27;</span><br><span class=\"line\">        // 已经刷新了token，将所有队列中的请求进行重试</span><br><span class=\"line\">        requests.forEach(cb =&gt; cb(token))</span><br><span class=\"line\">        // 重试完了别忘了清空这个队列（掘金评论区同学指点）</span><br><span class=\"line\">        requests = []</span><br><span class=\"line\">        return instance(config)</span><br><span class=\"line\">      &#125;).catch(res =&gt; &#123;</span><br><span class=\"line\">        console.error(&#x27;refreshtoken error =&gt;&#x27;, res)</span><br><span class=\"line\">        window.location.href = &#x27;/&#x27;</span><br><span class=\"line\">      &#125;).finally(() =&gt; &#123;</span><br><span class=\"line\">        isRefreshing = false</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // 正在刷新token，返回一个未执行resolve的promise</span><br><span class=\"line\">      return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">        // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行</span><br><span class=\"line\">        requests.push((token) =&gt; &#123;</span><br><span class=\"line\">          config.baseURL = &#x27;&#x27;</span><br><span class=\"line\">          config.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">          resolve(instance(config))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return response</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  return Promise.reject(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这里可能比较难理解的是 <code>requests</code>  这个队列中保存的是一个函数，这是为了让 resolve 不执行，先存起来，等刷新 token 后更方便调用这个函数使得 resolve 执行。至此，问题应该都解决了。</p>\n<h2 id=\"最后完整代码\"><a class=\"markdownIt-Anchor\" href=\"#最后完整代码\">#</a> 最后完整代码</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from &#x27;axios&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 从localStorage中获取token</span><br><span class=\"line\">function getLocalToken () &#123;</span><br><span class=\"line\">    const token = window.localStorage.getItem(&#x27;token&#x27;)</span><br><span class=\"line\">    return token</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 给实例添加一个setToken方法，用于登录后将最新token动态添加到header，同时将token保存在localStorage中</span><br><span class=\"line\">instance.setToken = (token) =&gt; &#123;</span><br><span class=\"line\">  instance.defaults.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">  window.localStorage.setItem(&#x27;token&#x27;, token)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function refreshToken () &#123;</span><br><span class=\"line\">    // instance是当前request.js中已创建的axios实例</span><br><span class=\"line\">    return instance.post(&#x27;/refreshtoken&#x27;).then(res =&gt; res.data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个axios实例</span><br><span class=\"line\">const instance = axios.create(&#123;</span><br><span class=\"line\">  baseURL: &#x27;/api&#x27;,</span><br><span class=\"line\">  timeout: 300000,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,</span><br><span class=\"line\">    &#x27;X-Token&#x27;: getLocalToken() // headers塞token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 是否正在刷新的标记</span><br><span class=\"line\">let isRefreshing = false</span><br><span class=\"line\">// 重试队列，每一项将是一个待执行的函数形式</span><br><span class=\"line\">let requests = []</span><br><span class=\"line\"></span><br><span class=\"line\">instance.interceptors.response.use(response =&gt; &#123;</span><br><span class=\"line\">  const &#123; code &#125; = response.data</span><br><span class=\"line\">  if (code === 1234) &#123;</span><br><span class=\"line\">    const config = response.config</span><br><span class=\"line\">    if (!isRefreshing) &#123;</span><br><span class=\"line\">      isRefreshing = true</span><br><span class=\"line\">      return refreshToken().then(res =&gt; &#123;</span><br><span class=\"line\">        const &#123; token &#125; = res.data</span><br><span class=\"line\">        instance.setToken(token)</span><br><span class=\"line\">        config.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">        config.baseURL = &#x27;&#x27;</span><br><span class=\"line\">        // 已经刷新了token，将所有队列中的请求进行重试</span><br><span class=\"line\">        requests.forEach(cb =&gt; cb(token))</span><br><span class=\"line\">        requests = []</span><br><span class=\"line\">        return instance(config)</span><br><span class=\"line\">      &#125;).catch(res =&gt; &#123;</span><br><span class=\"line\">        console.error(&#x27;refreshtoken error =&gt;&#x27;, res)</span><br><span class=\"line\">        window.location.href = &#x27;/&#x27;</span><br><span class=\"line\">      &#125;).finally(() =&gt; &#123;</span><br><span class=\"line\">        isRefreshing = false</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // 正在刷新token，将返回一个未执行resolve的promise</span><br><span class=\"line\">      return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">        // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行</span><br><span class=\"line\">        requests.push((token) =&gt; &#123;</span><br><span class=\"line\">          config.baseURL = &#x27;&#x27;</span><br><span class=\"line\">          config.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">          resolve(instance(config))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return response</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  return Promise.reject(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default instance</span><br></pre></td></tr></table></figure>\n<p>希望对大家有帮助。感谢看到最后<sup>_</sup>。</p>\n",
            "tags": [
                "vue",
                "axios"
            ]
        }
    ]
}