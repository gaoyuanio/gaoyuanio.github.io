<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>浅岛夏风 • Posts by &#34;ajax&#34; tag</title>
        <link>http://example.com</link>
        <description>一枚微不足道的前端攻城狮</description>
        <language>zh-CN</language>
        <pubDate>Wed, 20 Mar 2019 23:13:48 +0800</pubDate>
        <lastBuildDate>Wed, 20 Mar 2019 23:13:48 +0800</lastBuildDate>
        <category>javascript</category>
        <category>HTTP</category>
        <category>vue</category>
        <category>MySQL</category>
        <category>vuex</category>
        <category>webpack</category>
        <category>axios</category>
        <category>Hbuilder</category>
        <category>AJAX</category>
        <category>CSS</category>
        <category>react</category>
        <category>note</category>
        <category>移动端</category>
        <item>
            <guid isPermalink="true">http://example.com/2019/03/20/%E5%AD%A6%E4%B9%A0%E4%B9%8BAJAX/</guid>
            <title>学习之AJAX</title>
            <link>http://example.com/2019/03/20/%E5%AD%A6%E4%B9%A0%E4%B9%8BAJAX/</link>
            <category>AJAX</category>
            <pubDate>Wed, 20 Mar 2019 23:13:48 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;对于 AJAX 这个玩意儿，一开始学习的时候，根本不知道这是什么，我连 AJAX 有什么作用，是干什么的都不知道，所以在一开始学习这个的时候是非常蒙 B 的状态。那么在学习一段时间的 AJAX 之后，我总结了一些我自己对 AJAX 的理解，一起共勉。&lt;/p&gt;
&lt;p&gt;一、页面访问方式&lt;/p&gt;
&lt;p&gt;在学习 AJAX 之前，我们首先就需要了解页面的访问方式。页面的访问方式有如下两种同步访问和异步访问：&lt;/p&gt;
&lt;p&gt;①同步访问：在访问服务器时，只能等待服务器的响应，不能做其他事情。&lt;/p&gt;
&lt;p&gt;②异步访问：在向服务器发送请求时，不耽误用户在网页其他操作。相当于在同一时间，用户能做多个事情。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;光从字面上理解同步和异步不算太难，下面我为用图打个比方有助于更加深层次的理解同步和异步：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/gaoyuanio/imgs/img/20170730181503984&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图反之是同步访问的图解，异步访问我就不再作图了，反之，你想买煎饼和稀饭，你走到卖煎饼的铺子时候，老板说：好的，你的煎饼 5 分钟后好，你可以 5 分钟后过来拿。这个时候你就可以在这五分钟去买你要的稀饭，这就是异步访问。&lt;/p&gt;
&lt;p&gt;二、什么是 AJAX&lt;/p&gt;
&lt;p&gt;AJAX 的英文全名是：Asynchronous  Javascript  And  Xml&lt;/p&gt;
&lt;p&gt;异步的  JS     和    xml&lt;/p&gt;
&lt;p&gt;其中的本质：使用 JS 中 XMLHttpRequext (xhr) 对象异步的向服务器发送请求，服务器响应回来的部分数据而不是原完整的页面，并可以以 “无刷新” 的效果来更改页面中的局部内容。为了方便理解，作以下用户名验证的例子图助于理解：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/gaoyuanio/imgs/img/20170730183958321&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;三、获取ＡＪＡＸ对象　——XMLHttpRequest&lt;/p&gt;
&lt;p&gt;在主流浏览器中：new　XMLHttpRequest ( );&lt;/p&gt;
&lt;p&gt;注意：在 IE8 以下的浏览器不支持 XMLHttpRequest&lt;/p&gt;
&lt;p&gt;在 IE8 以下的浏览器中：&lt;/p&gt;
&lt;p&gt;new  ActiveXObject(“Microsoft.XMLHttp”);&lt;/p&gt;
&lt;p&gt;tip: 如果想测试你使用的浏览器是否支持 XMLHttpRequest，可以进行如下操作：&lt;/p&gt;
&lt;p&gt;1. 打开你的浏览器，例如谷歌、360、火狐、欧朋…;&lt;/p&gt;
&lt;p&gt;2. 按 F12，使用开发者工具，在 console 一栏中输入：console.log (window.XMLHttpRequest);&lt;/p&gt;
&lt;p&gt;3. 如果浏览器不支持 XMLHttpRequest, 以上会打印 null。&lt;/p&gt;
&lt;p&gt;// 创建 ajax 对象&lt;/p&gt;
&lt;p&gt;var  xhr;&lt;/p&gt;
&lt;p&gt;if(window.XMLHttpRequest){&lt;/p&gt;
&lt;p&gt;xhr = new  XMLHttpRequest();&lt;/p&gt;
&lt;p&gt;}else{&lt;/p&gt;
&lt;p&gt;xhr = new ActiveXObject(“Microsoft.XMLHttp”);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;tip：这段函在编写代码的时候使用的次数很多，通常我们将它封装成函数单独创建一个 JS 文件，命名为 common.js，要使用的时候调用者个 js 文件就可以了。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
