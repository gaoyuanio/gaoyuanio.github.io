{
    "version": "https://jsonfeed.org/version/1",
    "title": "浅岛夏风 • All posts by \"vuex\" tag",
    "description": "一枚微不足道的前端攻城狮",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/12/26/vuex%E7%AC%94%E8%AE%B0/",
            "url": "http://example.com/2020/12/26/vuex%E7%AC%94%E8%AE%B0/",
            "title": "vuex笔记",
            "date_published": "2020-12-26T13:43:23.000Z",
            "content_html": "<h1 id=\"vuex笔记\"><a class=\"markdownIt-Anchor\" href=\"#vuex笔记\">#</a> Vuex 笔记</h1>\n<h3 id=\"vuex概述\"><a class=\"markdownIt-Anchor\" href=\"#vuex概述\">#</a> Vuex 概述</h3>\n<h4 id=\"vuex是什么\"><a class=\"markdownIt-Anchor\" href=\"#vuex是什么\">#</a> vuex 是什么</h4>\n<p>​\tvuex 是实现组件全局状态（数据）管理的一种机制，可以方便实现组件之间数据的共享<br>\n<img data-src=\"https://cdn.jsdelivr.net/gh/gaoyuanio/imgs/img/image-20201221091304337.png\" alt=\"\"></p>\n<span id=\"more\"></span>\n<h4 id=\"使用vuex统一管理状态的好处\"><a class=\"markdownIt-Anchor\" href=\"#使用vuex统一管理状态的好处\">#</a> 使用 Vuex 统一管理状态的好处</h4>\n<ul>\n<li>能够在 vuex 中集中管理共享的数据，易于开发和后期维护</li>\n<li>能够高效地实现组件之间的数据共享，提高开发效率</li>\n<li>存储在 Vuex 中的数据都是响应式的，能够实施保持数据与页面的同步</li>\n</ul>\n<h4 id=\"什么样的数据适合存储到vuex中\"><a class=\"markdownIt-Anchor\" href=\"#什么样的数据适合存储到vuex中\">#</a> 什么样的数据适合存储到 Vuex 中</h4>\n<p>​\t一般情况下，只有组件之间共享的数据，才有必要存储到 vuex 中；对于组件中的私有数据，依旧存储在组件自身的 data 中即可</p>\n<h3 id=\"vuex的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#vuex的基本使用\">#</a> vuex 的基本使用</h3>\n<h4 id=\"安装vuex依赖\"><a class=\"markdownIt-Anchor\" href=\"#安装vuex依赖\">#</a> 安装 vuex 依赖</h4>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npm</span> install vex --save</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入vuex包\"><a class=\"markdownIt-Anchor\" href=\"#导入vuex包\">#</a> 导入 vuex 包</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建store对象\"><a class=\"markdownIt-Anchor\" href=\"#创建store对象\">#</a> 创建 store 对象</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// state中存放的就是全局共享的数据</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"将store对象挂载到vue实例中\"><a class=\"markdownIt-Anchor\" href=\"#将store对象挂载到vue实例中\">#</a> 将 store 对象挂载到 vue 实例中</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">reader</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(app),</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  <span class=\"comment\">// 将创建的共享数据对象，挂载到vue实例中</span></span><br><span class=\"line\">  <span class=\"comment\">// 所有的组件，就可以直接从store中获取全局的数据了</span></span><br><span class=\"line\">  store</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"核心概念概述\"><a class=\"markdownIt-Anchor\" href=\"#核心概念概述\">#</a> 核心概念概述</h3>\n<blockquote>\n<p>vuex 中的主要核心概念如下：</p>\n<ul>\n<li><strong>state</strong></li>\n<li><strong>Mutation</strong></li>\n<li><strong>Action</strong></li>\n<li><strong>Getter</strong></li>\n</ul>\n</blockquote>\n<h4 id=\"state\"><a class=\"markdownIt-Anchor\" href=\"#state\">#</a> State</h4>\n<p>​\tState 提供唯一的公共数据源，所有的共享的数据都要统一放到 Store 的 State 中进行储存</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建store数据源，提供唯一公共数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>（1）组件访问 State 中数据的第一种方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$store.state.全局数据名称</span><br></pre></td></tr></table></figure>\n<p>（2）组件访问 State 中数据的第二种方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.从vuex中按需导入 mapState函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>通过刚刚导入的 mapState 函数，将当前组件需要的全局数据，映射为当前数据的 computed 计算属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2.将全局数据，映射为当前组件的计算属性</span></span><br><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">\t...mapState([<span class=\"string\">&#x27;count&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mutation\"><a class=\"markdownIt-Anchor\" href=\"#mutation\">#</a> Mutation</h4>\n<p>Mutation 用于变更 Store 中的数据</p>\n<ol>\n<li>\n<p>只能通过 mutation 变更 Store 数据，不可以直接操作 Store 中的数据</p>\n</li>\n<li>\n<p>通过这种方式虽然操作起来稍微繁琐一些，但是可以集中件套所有数据的变化</p>\n</li>\n</ol>\n<h5 id=\"定义mutations\"><a class=\"markdownIt-Anchor\" href=\"#定义mutations\">#</a> 定义 mutations</h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义Mutation</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//变更状态</span></span><br><span class=\"line\">\t\t\tstate.count++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"触发mutations\"><a class=\"markdownIt-Anchor\" href=\"#触发mutations\">#</a> 触发 mutations</h5>\n<p>（1）触发 mutations 的第一种方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 触发mutation</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">handle1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//\t触发mutation的第一种方式</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以在触发 mutations 时传递参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义Mutation</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"title\">addN</span>(<span class=\"params\">state, step</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//变更状态</span></span><br><span class=\"line\">\t\t\tstate.count += step</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发mutation</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">handle1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//\t触发mutation的第一种方式</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;addN&#x27;</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）触发 mutations 第二种方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.从vuex中按需导入mapMutations函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>通过刚才导入的 mapMuntations 函数，将需要的 mutations 函数，映射为当前组件的 methods 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2.将指定的mutations函数，映射为当前组件的methods函数</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">\t...mapMutations([<span class=\"string\">&#x27;add&#x27;</span>,<span class=\"string\">&#x27;addN&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"action\"><a class=\"markdownIt-Anchor\" href=\"#action\">#</a> Action</h4>\n<blockquote>\n<p>Action 用于处理异步任务</p>\n</blockquote>\n<p>如果通过异步操作变更数据，必须通过 Action，而不能使用 Mutation，但是在 Action 中还是要通过出发 Mutation 的方式间接变更数据。</p>\n<h5 id=\"定义action\"><a class=\"markdownIt-Anchor\" href=\"#定义action\">#</a> 定义 Action</h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义Action</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">// ...此处省略其他代码</span></span><br><span class=\"line\">  <span class=\"attr\">mutaions</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tstate.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">addAsync</span>(<span class=\"params\">context</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;add&#x27;</span>)</span><br><span class=\"line\">      &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"触发action\"><a class=\"markdownIt-Anchor\" href=\"#触发action\">#</a> 触发 Action</h5>\n<p>（1）触发 actions 的第一种方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">handle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 触发actions的第一种方式</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;addAsync&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>触发 actions 异步任务时携带参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义Action</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">// ...此处省略其他代码</span></span><br><span class=\"line\">  <span class=\"attr\">mutaions</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">addN</span>(<span class=\"params\">state,step</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tstate.count += step</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">addNAsync</span>(<span class=\"params\">context, step</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;addN&#x27;</span>,step)</span><br><span class=\"line\">      &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发actions</span></span><br><span class=\"line\"><span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">handle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;addAsync&#x27;</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）触发 actions 的第二种方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.从vuex中按需导入mapActions函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>通过刚才导入的 mapActions 函数，映射为当前组件的 methods 函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">\t...mapAction([&#x27;addAsync&#x27;,&#x27;addNASync&#x27;])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"getter\"><a class=\"markdownIt-Anchor\" href=\"#getter\">#</a> Getter</h4>\n<p>Getter 用于对 store 中的数据进行加工处理形成新的数据</p>\n<ul>\n<li>\n<p>Getter 可以对 Store 中已有的数据加工处理之后形成新的数据，类似 Vue 的计算属性</p>\n</li>\n<li>\n<p>Store 中数据发生变化，Getter 的数据也会跟着变化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义Getter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">showNum</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`当前最新的数据时【 <span class=\"subst\">$&#123;state.count&#125;</span> 】`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;) </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用 Getter 的第一种方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$store.getters.名称</span><br></pre></td></tr></table></figure>\n<p>使用 Getter 的第二种方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  ...mapGetters([<span class=\"string\">&#x27;showNum&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "vuex"
            ]
        }
    ]
}