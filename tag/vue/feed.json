{
    "version": "https://jsonfeed.org/version/1",
    "title": "浅岛夏风 • All posts by \"vue\" tag",
    "description": "一枚微不足道的前端攻城狮",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/04/13/%E5%AE%9E%E7%8E%B0%E6%BB%9A%E5%8A%A8%E5%8A%A8%E7%94%BB%E2%80%94%E6%B8%90%E5%85%A5%E5%8A%A8%E7%94%BB/",
            "url": "http://example.com/2021/04/13/%E5%AE%9E%E7%8E%B0%E6%BB%9A%E5%8A%A8%E5%8A%A8%E7%94%BB%E2%80%94%E6%B8%90%E5%85%A5%E5%8A%A8%E7%94%BB/",
            "title": "实现滚动动画—渐入动画",
            "date_published": "2021-04-13T14:00:20.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>Vue 和 React 版本其实区别不大，，，主要使用原生 js 就能实现，性能上就没考虑太多（可以在完成需求后，移除进入视区后的元素的类名，如：slide-item，lazy-img 等）</p>\n<h2 id=\"一-滚动动画vue-版本\"><a class=\"markdownIt-Anchor\" href=\"#一-滚动动画vue-版本\">#</a> 一、滚动动画：Vue 版本</h2>\n<h3 id=\"给-html-元素添加-class\"><a class=\"markdownIt-Anchor\" href=\"#给-html-元素添加-class\">#</a> 给 HTML 元素添加 class</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;slide-item&quot;&gt;需要根据滚动条位置显示的元素&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;slide-item slide-delay&quot; data-delay=&quot;200&quot;&gt;有延迟的元素&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"css-和动画\"><a class=\"markdownIt-Anchor\" href=\"#css-和动画\">#</a> css 和动画</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.slide-item &#123; opacity: 0; &#125;</span><br><span class=\"line\">.slide-up,</span><br><span class=\"line\">.slide-up-200,</span><br><span class=\"line\">.slide-up-400,</span><br><span class=\"line\">.slide-up-600,</span><br><span class=\"line\">.slide-up-800 &#123;</span><br><span class=\"line\">    animation: slide-up .5s forwards;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.slide-up-200 &#123; animation-delay: .2s; &#125;</span><br><span class=\"line\">.slide-up-400 &#123; animation-delay: .4s;&#125;</span><br><span class=\"line\">.slide-up-600 &#123; animation-delay: .6s;&#125;</span><br><span class=\"line\">.slide-up-800 &#123; animation-delay: .8s; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@keyframes slide-up &#123;</span><br><span class=\"line\">    from &#123; opacity: 0; transform: translateY(50%); &#125;</span><br><span class=\"line\">    to &#123; opacity: 1; transform: translateY(0); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"监听滚动\"><a class=\"markdownIt-Anchor\" href=\"#监听滚动\">#</a> 监听滚动</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">  window.addEventListener(&quot;scroll&quot;, this.onScroll);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">beforeDestroy() &#123;</span><br><span class=\"line\">  window.removeEventListener(&quot;scroll&quot;, this.onScroll);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"滚动方法\"><a class=\"markdownIt-Anchor\" href=\"#滚动方法\">#</a> 滚动方法</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 监听滚动</span><br><span class=\"line\">onScroll() &#123;</span><br><span class=\"line\">  const slideItems = document.querySelectorAll(&#x27;.slide-item&#x27;);</span><br><span class=\"line\">  // 上滑</span><br><span class=\"line\">  slideItems.forEach(item =&gt; &#123;</span><br><span class=\"line\">    let itemBCR = item.getBoundingClientRect();</span><br><span class=\"line\">    // 进入视区或在视区之上</span><br><span class=\"line\">    if (itemBCR.top &lt;= window.innerHeight + 10) &#123;</span><br><span class=\"line\">      if (Array.from(item.classList).includes(&#x27;slide-delay&#x27;)) &#123;</span><br><span class=\"line\">        item.classList.add(`slide-up-$&#123;item.dataset.delay&#125;`);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        item.classList.add(&#x27;slide-up&#x27;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 可以在这里 remove 掉 slide-item 这个类名，优化性能</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // 这里主要用来多次显示效果的，上面 remove 掉 slide-item 后将不再起作用</span><br><span class=\"line\">      if (Array.from(item.classList).includes(&#x27;slide-delay&#x27;)) &#123;</span><br><span class=\"line\">        item.classList.remove(`slide-up-$&#123;item.dataset.delay&#125;`);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        item.classList.remove(&#x27;slide-up&#x27;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-滚动动画react-版本\"><a class=\"markdownIt-Anchor\" href=\"#二-滚动动画react-版本\">#</a> 二、滚动动画：React 版本</h2>\n<p>主要使用 hooks</p>\n<h3 id=\"给-html-元素添加-class-2\"><a class=\"markdownIt-Anchor\" href=\"#给-html-元素添加-class-2\">#</a> 给 HTML 元素添加 class</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span className=&#123;`slide-item`&#125;&gt;需要根据滚动条位置显示的元素&lt;/span&gt;</span><br><span class=\"line\">&lt;span className=&#123;`slide-item slide-delay`&#125; data-delay=&quot;200&quot;&gt;有延迟的元素&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"css-和动画-2\"><a class=\"markdownIt-Anchor\" href=\"#css-和动画-2\">#</a> css 和动画</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.slide-item &#123; opacity: 0; &#125;</span><br><span class=\"line\">.slide-up,</span><br><span class=\"line\">.slide-up-200,</span><br><span class=\"line\">.slide-up-400,</span><br><span class=\"line\">.slide-up-600,</span><br><span class=\"line\">.slide-up-800 &#123;</span><br><span class=\"line\">    animation: slide-up .5s forwards;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.slide-up-200 &#123; animation-delay: .2s; &#125;</span><br><span class=\"line\">.slide-up-400 &#123; animation-delay: .4s;&#125;</span><br><span class=\"line\">.slide-up-600 &#123; animation-delay: .6s;&#125;</span><br><span class=\"line\">.slide-up-800 &#123; animation-delay: .8s; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@keyframes slide-up &#123;</span><br><span class=\"line\">    from &#123; opacity: 0; transform: translateY(50%); &#125;</span><br><span class=\"line\">    to &#123; opacity: 1; transform: translateY(0); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"监听滚动-2\"><a class=\"markdownIt-Anchor\" href=\"#监听滚动-2\">#</a> 监听滚动</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  onScroll();</span><br><span class=\"line\">  window.addEventListener(&#x27;scroll&#x27;, onScroll);</span><br><span class=\"line\"></span><br><span class=\"line\">  return () =&gt; &#123;</span><br><span class=\"line\">    window.removeEventListener(&#x27;scroll&#x27;, onScroll);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n<h3 id=\"滚动方法-2\"><a class=\"markdownIt-Anchor\" href=\"#滚动方法-2\">#</a> 滚动方法</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 监听滚动</span><br><span class=\"line\">function onScroll(): void &#123;</span><br><span class=\"line\">  const slideItems = document.querySelectorAll(&#x27;.slide-item&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">  slideItems.forEach((item: any) =&gt; &#123;</span><br><span class=\"line\">    let slideBCR = item.getBoundingClientRect();</span><br><span class=\"line\">    // 进入视区或在视区之上</span><br><span class=\"line\">    if (slideBCR.top &lt;= window.innerHeight + 10) &#123;</span><br><span class=\"line\">      if (Array.from(item.classList).includes(&#x27;slide-delay&#x27;)) &#123; // 延迟</span><br><span class=\"line\">        item.classList.add(`slide-up-$&#123;item.dataset.delay&#125;`);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        item.classList.add(&#x27;slide-up&#x27;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 可以在这里 remove 掉 slide-item 这个类名，优化性能</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // 这里主要用来多次显示效果的，上面 remove 掉 slide-item 后将不再起作用</span><br><span class=\"line\">      if (Array.from(item.classList).includes(&#x27;slide-delay&#x27;)) &#123; // 延迟</span><br><span class=\"line\">        item.classList.remove(`slide-up-$&#123;item.dataset.delay&#125;`);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        item.classList.remove(&#x27;slide-up&#x27;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "vue",
                "react"
            ]
        },
        {
            "id": "http://example.com/2021/03/29/vue%E9%87%8C%E5%B0%81%E8%A3%85axios%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8promise%E6%97%A0%E7%97%9B%E5%88%B7%E6%96%B0token/",
            "url": "http://example.com/2021/03/29/vue%E9%87%8C%E5%B0%81%E8%A3%85axios%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8promise%E6%97%A0%E7%97%9B%E5%88%B7%E6%96%B0token/",
            "title": "vue里封装axios——利用promise无痛刷新token",
            "date_published": "2021-03-29T12:09:53.000Z",
            "content_html": "<h2 id=\"需求\"><a class=\"markdownIt-Anchor\" href=\"#需求\">#</a> 需求</h2>\n<p>最近遇到个需求：前端登录后，后端返回 <code>token</code>  和 <code>token有效时间</code> ，当 token 过期时要求用旧 token 去获取新的 token，前端需要做到无痛刷新 <code>token</code> ，即请求刷新 token 时要做到用户无感知。</p>\n<h2 id=\"需求解析\"><a class=\"markdownIt-Anchor\" href=\"#需求解析\">#</a> 需求解析</h2>\n<p>当用户发起一个请求时，判断 token 是否已过期，若已过期则先调 <code>refreshToken</code>  接口，拿到新的 token 后再继续执行之前的请求。</p>\n<p>这个问题的难点在于：当同时发起多个请求，而刷新 token 的接口还没返回，此时其他请求该如何处理？接下来会循序渐进地分享一下整个过程。</p>\n<span id=\"more\"></span>\n<h2 id=\"实现思路\"><a class=\"markdownIt-Anchor\" href=\"#实现思路\">#</a> 实现思路</h2>\n<p>由于后端返回了 token 的有效时间，可以有两种方法：</p>\n<h3 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\">#</a> 方法一：</h3>\n<p>在请求发起前拦截每个请求，判断 token 的有效时间是否已经过期，若已过期，则将请求挂起，先刷新 token 后再继续请求。</p>\n<h3 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\">#</a> 方法二：</h3>\n<p>不在请求前拦截，而是拦截返回后的数据。先发起请求，接口返回过期后，先刷新 token，再进行一次重试。</p>\n<h3 id=\"两种方法对比\"><a class=\"markdownIt-Anchor\" href=\"#两种方法对比\">#</a> 两种方法对比</h3>\n<p>方法一</p>\n<ul>\n<li>优点： 在请求前拦截，能节省请求，省流量。</li>\n<li>缺点： 需要后端额外提供一个 token 过期时间的字段；使用了本地时间判断，若本地时间被篡改，特别是本地时间比服务器时间慢时，拦截会失败。</li>\n</ul>\n<blockquote>\n<p>PS：token 有效时间建议是时间段，类似缓存的 MaxAge，而不要是绝对时间。当服务器和本地时间不一致时，绝对时间会有问题。</p>\n</blockquote>\n<p>方法二</p>\n<ul>\n<li>优点：不需额外的 token 过期字段，不需判断时间。</li>\n<li>缺点： 会消耗多一次请求，耗流量。</li>\n</ul>\n<p>综上，方法一和二优缺点是互补的，方法一有校验失败的风险（本地时间被篡改时，当然一般没有用户闲的蛋疼去改本地时间的啦），方法二更简单粗暴，等知道服务器已经过期了再重试一次，只是会耗多一个请求。</p>\n<p>在这里博主选择了 <em>方法二</em>。</p>\n<h2 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"#实现\">#</a> 实现</h2>\n<p>这里会使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9z\"> axios</span> 来实现，方法一是请求前拦截，所以会使用 <code>axios.interceptors.request.use()</code>  这个方法；</p>\n<p>而方法二是请求后拦截，所以会使用 <code>axios.interceptors.response.use()</code>  方法。</p>\n<h3 id=\"封装axios基本骨架\"><a class=\"markdownIt-Anchor\" href=\"#封装axios基本骨架\">#</a> 封装 axios 基本骨架</h3>\n<p>首先说明一下，项目中的 token 是存在 <code>localStorage</code>  中的。 <code>request.js</code>  基本骨架:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from &#x27;axios&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 从localStorage中获取token</span><br><span class=\"line\">function getLocalToken () &#123;</span><br><span class=\"line\">    const token = window.localStorage.getItem(&#x27;token&#x27;)</span><br><span class=\"line\">    return token</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 给实例添加一个setToken方法，用于登录后将最新token动态添加到header，同时将token保存在localStorage中</span><br><span class=\"line\">instance.setToken = (token) =&gt; &#123;</span><br><span class=\"line\">  instance.defaults.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">  window.localStorage.setItem(&#x27;token&#x27;, token)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个axios实例</span><br><span class=\"line\">const instance = axios.create(&#123;</span><br><span class=\"line\">  baseURL: &#x27;/api&#x27;,</span><br><span class=\"line\">  timeout: 300000,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,</span><br><span class=\"line\">    &#x27;X-Token&#x27;: getLocalToken() // headers塞token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 拦截返回的数据</span><br><span class=\"line\">instance.interceptors.response.use(response =&gt; &#123;</span><br><span class=\"line\">  // 接下来会在这里进行token过期的逻辑处理</span><br><span class=\"line\">  return response</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  return Promise.reject(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default instance</span><br></pre></td></tr></table></figure>\n<p>这个是项目中一般的 axios 实例的封装，创建实例时，将本地已有的 token 放进 header，然后 export 出去供调用。接下来就是如何拦截返回的数据啦。</p>\n<h3 id=\"instanceinterceptorsresponseuse拦截实现\"><a class=\"markdownIt-Anchor\" href=\"#instanceinterceptorsresponseuse拦截实现\">#</a> instance.interceptors.response.use 拦截实现</h3>\n<p>后端接口一般会有一个约定好的数据结构，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;code: 1234, message: &#x27;token过期&#x27;, data: &#123;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>如我这里，后端约定当 <code>code === 1234</code>  时表示 token 过期了，此时就要求刷新 token。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instance.interceptors.response.use(response =&gt; &#123;</span><br><span class=\"line\">  const &#123; code &#125; = response.data</span><br><span class=\"line\">  if (code === 1234) &#123;</span><br><span class=\"line\">    // 说明token过期了,刷新token</span><br><span class=\"line\">    return refreshToken().then(res =&gt; &#123;</span><br><span class=\"line\">      // 刷新token成功，将最新的token更新到header中，同时保存在localStorage中</span><br><span class=\"line\">      const &#123; token &#125; = res.data</span><br><span class=\"line\">      instance.setToken(token)</span><br><span class=\"line\">      // 获取当前失败的请求</span><br><span class=\"line\">      const config = response.config</span><br><span class=\"line\">      // 重置一下配置</span><br><span class=\"line\">      config.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">      config.baseURL = &#x27;&#x27; // url已经带上了/api，避免出现/api/api的情况</span><br><span class=\"line\">      // 重试当前请求并返回promise</span><br><span class=\"line\">      return instance(config)</span><br><span class=\"line\">    &#125;).catch(res =&gt; &#123;</span><br><span class=\"line\">      console.error(&#x27;refreshtoken error =&gt;&#x27;, res)</span><br><span class=\"line\">      //刷新token失败，神仙也救不了了，跳转到首页重新登录吧</span><br><span class=\"line\">      window.location.href = &#x27;/&#x27;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return response</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  return Promise.reject(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">function refreshToken () &#123;</span><br><span class=\"line\">    // instance是当前request.js中已创建的axios实例</span><br><span class=\"line\">    return instance.post(&#x27;/refreshtoken&#x27;).then(res =&gt; res.data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要额外注意的是， <code>response.config</code>  就是原请求的配置，但这个是已经处理过了的， <code>config.url</code>  已经带上了 <code>baseUrl</code> ，因此重试时需要去掉，同时 token 也是旧的，需要刷新下。</p>\n<p>以上就基本做到了无痛刷新 token，当 token 正常时，正常返回，当 token 已过期，则 axios 内部进行一次刷新 token 和重试。对调用者来说，axios 内部的刷新 token 是一个黑盒，是无感知的，因此需求已经做到了。</p>\n<h2 id=\"问题和优化\"><a class=\"markdownIt-Anchor\" href=\"#问题和优化\">#</a> 问题和优化</h2>\n<p>上面的代码还是存在一些问题的，没有考虑到多次请求的问题，因此需要进一步优化。</p>\n<h3 id=\"如何防止多次刷新token\"><a class=\"markdownIt-Anchor\" href=\"#如何防止多次刷新token\">#</a> 如何防止多次刷新 token</h3>\n<p>如果 refreshToken 接口还没返回，此时再有一个过期的请求进来，上面的代码就会再一次执行 refreshToken，这就会导致多次执行刷新 token 的接口，因此需要防止这个问题。我们可以在 <code>request.js</code>  中用一个 <code>flag</code>  来标记当前是否正在刷新 token 的状态，如果正在刷新则不再调用刷新 token 的接口。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 是否正在刷新的标记</span><br><span class=\"line\">let isRefreshing = false</span><br><span class=\"line\">instance.interceptors.response.use(response =&gt; &#123;</span><br><span class=\"line\">  const &#123; code &#125; = response.data</span><br><span class=\"line\">  if (code === 1234) &#123;</span><br><span class=\"line\">    if (!isRefreshing) &#123;</span><br><span class=\"line\">      isRefreshing = true</span><br><span class=\"line\">      return refreshToken().then(res =&gt; &#123;</span><br><span class=\"line\">        const &#123; token &#125; = res.data</span><br><span class=\"line\">        instance.setToken(token)</span><br><span class=\"line\">        const config = response.config</span><br><span class=\"line\">        config.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">        config.baseURL = &#x27;&#x27;</span><br><span class=\"line\">        return instance(config)</span><br><span class=\"line\">      &#125;).catch(res =&gt; &#123;</span><br><span class=\"line\">        console.error(&#x27;refreshtoken error =&gt;&#x27;, res)</span><br><span class=\"line\">        window.location.href = &#x27;/&#x27;</span><br><span class=\"line\">      &#125;).finally(() =&gt; &#123;</span><br><span class=\"line\">        isRefreshing = false</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return response</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  return Promise.reject(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样子就可以避免在刷新 token 时再进入方法了。但是这种做法是相当于把其他失败的接口给舍弃了，假如同时发起两个请求，且几乎同时返回，第一个请求肯定是进入了 refreshToken 后再重试，而第二个请求则被丢弃了，仍是返回失败，所以接下来还得解决其他接口的重试问题。</p>\n<h3 id=\"同时发起两个或以上的请求时其他接口如何重试\"><a class=\"markdownIt-Anchor\" href=\"#同时发起两个或以上的请求时其他接口如何重试\">#</a> 同时发起两个或以上的请求时，其他接口如何重试</h3>\n<p>两个接口几乎同时发起和返回，第一个接口会进入刷新 token 后重试的流程，而第二个接口需要先存起来，然后等刷新 token 后再重试。同样，如果同时发起三个请求，此时需要缓存后两个接口，等刷新 token 后再重试。由于接口都是异步的，处理起来会有点麻烦。</p>\n<p>当第二个过期的请求进来，token 正在刷新，我们先将这个请求存到一个数组队列中，想办法让这个请求处于等待中，一直等到刷新 token 后再逐个重试清空请求队列。<br>\n那么如何做到让这个请求处于等待中呢？为了解决这个问题，我们得借助 <code>Promise</code> 。将请求存进队列中后，同时返回一个 <code>Promise</code> ，让这个 <code>Promise</code>  一直处于 <code>Pending</code>  状态（即不调用 resolve），此时这个请求就会一直等啊等，只要我们不执行 resolve，这个请求就会一直在等待。当刷新请求的接口返回来后，我们再调用 resolve，逐个重试。最终代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 是否正在刷新的标记</span><br><span class=\"line\">let isRefreshing = false</span><br><span class=\"line\">// 重试队列，每一项将是一个待执行的函数形式</span><br><span class=\"line\">let requests = []</span><br><span class=\"line\"></span><br><span class=\"line\">instance.interceptors.response.use(response =&gt; &#123;</span><br><span class=\"line\">  const &#123; code &#125; = response.data</span><br><span class=\"line\">  if (code === 1234) &#123;</span><br><span class=\"line\">    const config = response.config</span><br><span class=\"line\">    if (!isRefreshing) &#123;</span><br><span class=\"line\">      isRefreshing = true</span><br><span class=\"line\">      return refreshToken().then(res =&gt; &#123;</span><br><span class=\"line\">        const &#123; token &#125; = res.data</span><br><span class=\"line\">        instance.setToken(token)</span><br><span class=\"line\">        config.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">        config.baseURL = &#x27;&#x27;</span><br><span class=\"line\">        // 已经刷新了token，将所有队列中的请求进行重试</span><br><span class=\"line\">        requests.forEach(cb =&gt; cb(token))</span><br><span class=\"line\">        // 重试完了别忘了清空这个队列（掘金评论区同学指点）</span><br><span class=\"line\">        requests = []</span><br><span class=\"line\">        return instance(config)</span><br><span class=\"line\">      &#125;).catch(res =&gt; &#123;</span><br><span class=\"line\">        console.error(&#x27;refreshtoken error =&gt;&#x27;, res)</span><br><span class=\"line\">        window.location.href = &#x27;/&#x27;</span><br><span class=\"line\">      &#125;).finally(() =&gt; &#123;</span><br><span class=\"line\">        isRefreshing = false</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // 正在刷新token，返回一个未执行resolve的promise</span><br><span class=\"line\">      return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">        // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行</span><br><span class=\"line\">        requests.push((token) =&gt; &#123;</span><br><span class=\"line\">          config.baseURL = &#x27;&#x27;</span><br><span class=\"line\">          config.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">          resolve(instance(config))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return response</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  return Promise.reject(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这里可能比较难理解的是 <code>requests</code>  这个队列中保存的是一个函数，这是为了让 resolve 不执行，先存起来，等刷新 token 后更方便调用这个函数使得 resolve 执行。至此，问题应该都解决了。</p>\n<h2 id=\"最后完整代码\"><a class=\"markdownIt-Anchor\" href=\"#最后完整代码\">#</a> 最后完整代码</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import axios from &#x27;axios&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 从localStorage中获取token</span><br><span class=\"line\">function getLocalToken () &#123;</span><br><span class=\"line\">    const token = window.localStorage.getItem(&#x27;token&#x27;)</span><br><span class=\"line\">    return token</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 给实例添加一个setToken方法，用于登录后将最新token动态添加到header，同时将token保存在localStorage中</span><br><span class=\"line\">instance.setToken = (token) =&gt; &#123;</span><br><span class=\"line\">  instance.defaults.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">  window.localStorage.setItem(&#x27;token&#x27;, token)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function refreshToken () &#123;</span><br><span class=\"line\">    // instance是当前request.js中已创建的axios实例</span><br><span class=\"line\">    return instance.post(&#x27;/refreshtoken&#x27;).then(res =&gt; res.data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个axios实例</span><br><span class=\"line\">const instance = axios.create(&#123;</span><br><span class=\"line\">  baseURL: &#x27;/api&#x27;,</span><br><span class=\"line\">  timeout: 300000,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,</span><br><span class=\"line\">    &#x27;X-Token&#x27;: getLocalToken() // headers塞token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 是否正在刷新的标记</span><br><span class=\"line\">let isRefreshing = false</span><br><span class=\"line\">// 重试队列，每一项将是一个待执行的函数形式</span><br><span class=\"line\">let requests = []</span><br><span class=\"line\"></span><br><span class=\"line\">instance.interceptors.response.use(response =&gt; &#123;</span><br><span class=\"line\">  const &#123; code &#125; = response.data</span><br><span class=\"line\">  if (code === 1234) &#123;</span><br><span class=\"line\">    const config = response.config</span><br><span class=\"line\">    if (!isRefreshing) &#123;</span><br><span class=\"line\">      isRefreshing = true</span><br><span class=\"line\">      return refreshToken().then(res =&gt; &#123;</span><br><span class=\"line\">        const &#123; token &#125; = res.data</span><br><span class=\"line\">        instance.setToken(token)</span><br><span class=\"line\">        config.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">        config.baseURL = &#x27;&#x27;</span><br><span class=\"line\">        // 已经刷新了token，将所有队列中的请求进行重试</span><br><span class=\"line\">        requests.forEach(cb =&gt; cb(token))</span><br><span class=\"line\">        requests = []</span><br><span class=\"line\">        return instance(config)</span><br><span class=\"line\">      &#125;).catch(res =&gt; &#123;</span><br><span class=\"line\">        console.error(&#x27;refreshtoken error =&gt;&#x27;, res)</span><br><span class=\"line\">        window.location.href = &#x27;/&#x27;</span><br><span class=\"line\">      &#125;).finally(() =&gt; &#123;</span><br><span class=\"line\">        isRefreshing = false</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // 正在刷新token，将返回一个未执行resolve的promise</span><br><span class=\"line\">      return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">        // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行</span><br><span class=\"line\">        requests.push((token) =&gt; &#123;</span><br><span class=\"line\">          config.baseURL = &#x27;&#x27;</span><br><span class=\"line\">          config.headers[&#x27;X-Token&#x27;] = token</span><br><span class=\"line\">          resolve(instance(config))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return response</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  return Promise.reject(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default instance</span><br></pre></td></tr></table></figure>\n<p>希望对大家有帮助。感谢看到最后<sup>_</sup>。</p>\n",
            "tags": [
                "vue",
                "axios"
            ]
        },
        {
            "id": "http://example.com/2021/02/20/VUE%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E7%9A%846%E7%A7%8D%E6%96%B9%E5%BC%8F/",
            "url": "http://example.com/2021/02/20/VUE%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E7%9A%846%E7%A7%8D%E6%96%B9%E5%BC%8F/",
            "title": "VUE组件之间通信的6种方式",
            "date_published": "2021-02-20T02:01:48.000Z",
            "content_html": "<h3 id=\"1方法一props和emit\"><a class=\"markdownIt-Anchor\" href=\"#1方法一props和emit\">#</a> 1. 方法一：<strong>props</strong> 和 **$emit**</h3>\n<p>父组件通过 props 向下传递数据给子组件，子组件通过 event 给父组件发送消息，实际上就是子组件把自己的数据发送给父组件。</p>\n<h3 id=\"2方法二attrs和listeners\"><a class=\"markdownIt-Anchor\" href=\"#2方法二attrs和listeners\">#</a> 2. 方法二：<strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi>s</mi><mo>∗</mo><mo>∗</mo><mtext>和</mtext><mo>∗</mo><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">attrs**和**</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">∗</span><span class=\"mord cjk_fallback\">和</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">∗</span></span></span></span>listeners</strong></h3>\n<p>​\t第一种方式处理父子组件之间的数据传输有一个问题：如果父组件 A 下面有子组件 B，组件 B 下面有组件 C, 这时如果组件 A 想传递数据给组件 C 怎么办呢？ 如果采用第一种方法，我们必须让组件 A 通过 prop 传递消息给组件 B，组件 B 在通过 prop 传递消息给组件 C；要是组件 A 和组件 C 之间有更多的组件，那采用这种方式就很复杂了。Vue 2.4 开始提供了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi>s</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">attrs和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">和</span></span></span></span> listeners 来解决这个问题，能够让组件 A 之间传递消息给组件 C。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--组件C--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; v-model=&quot;$attrs.messagec&quot; @input=&quot;passCData($attrs.messagec)&quot;&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">    name: &#x27;C&#x27;,</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">      return &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      passCData(val)&#123;</span><br><span class=\"line\">        //触发父组件A中的事件,把从A得到的数据hello C还给A组件</span><br><span class=\"line\">        this.$emit(&#x27;getCData&#x27;,val)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--组件B--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @input=&quot;passData(mymessage)&quot;&gt;</span><br><span class=\"line\">    &lt;!-- C组件中能直接触发getCData的原因在于 B组件调用C组件时 使用 v-on 绑定了$listeners 属性 --&gt;</span><br><span class=\"line\">    &lt;!-- 通过v-bind 绑定$attrs属性，C组件可以直接获取到A组件中传递下来的props（除了B组件中props声明的） --&gt;</span><br><span class=\"line\">    &lt;C v-bind=&quot;$attrs&quot; v-on=&quot;$listeners&quot;&gt;&lt;/C&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">    name: &#x27;B&#x27;,</span><br><span class=\"line\">    props:[</span><br><span class=\"line\">      message:&#123;</span><br><span class=\"line\">        type: String,</span><br><span class=\"line\">        default: null</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],//得到父组件A传递过来的数据,hello B</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      passData(val)&#123;</span><br><span class=\"line\">        //触发父组件中的事件,把message给组件A</span><br><span class=\"line\">        this.$emit(&#x27;getChildData&#x27;,val)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--组件A--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;this is parent compoent!&lt;/p&gt;</span><br><span class=\"line\">    &lt;B </span><br><span class=\"line\">     :messagec=&quot;messagec&quot; </span><br><span class=\"line\">     :message=&quot;message&quot; </span><br><span class=\"line\">     :getCData=&quot;getCData&quot;</span><br><span class=\"line\">     :getChildData=&quot;getChildData&quot;&gt;&lt;/B&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">    name: &#x27;A&#x27;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        message:&#x27;hello B&#x27;,</span><br><span class=\"line\">        messagec:&#x27;hello C&#x27; //传递给c组件的数据</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      getChildData(val)&#123;</span><br><span class=\"line\">        console.log(&#x27;这是来自B组件的数据&#x27;,val) //打印hello B</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      //执行C子组件触发的事件</span><br><span class=\"line\">      getCData(val)&#123;</span><br><span class=\"line\">        console.log(&quot;这是来自C组件的数据：&quot;, val) //打印hello C</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3方法3provide和-inject\"><a class=\"markdownIt-Anchor\" href=\"#3方法3provide和-inject\">#</a> 3. 方法 3：<strong>provide</strong> 和 <strong>inject</strong></h3>\n<p>在 Vue.js 的  <code>2.2.0+</code>  版本中添加加了 provide 和 inject 选项。他们成对出现，用于父级组件向下传递数据。</p>\n<p>父组件中通过 provide 来提供变量，然后在子组件中通过 inject 来注入变量。不论子组件有多深，只要调用了 inject 那么就可以注入 provide 中的数据。而不是局限于只能从当前父组件的 prop 属性来获取数据，只要在父组件的生命周期内，子组件都可以调用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--父组件--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;this is parent compoent!&lt;/p&gt;</span><br><span class=\"line\">    &lt;child&gt;&lt;/child&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">    name: &#x27;parent&#x27;,</span><br><span class=\"line\">    provide: &#123;</span><br><span class=\"line\">      forChidrenData:&#x27;这是要个子组件的数据&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        message:&#x27;hello&#x27;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--子组件--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot;&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">    name: &#x27;child&#x27;,</span><br><span class=\"line\">    inject:[&#x27;forChidrenData&#x27;], //得到父组件传递过来的数据</span><br><span class=\"line\">    provide: &#123;</span><br><span class=\"line\">      forChidrenData:&#x27;这是要个子组件的数据&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        mymessage:this.forChidrenData</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4方法四vuex处理组件之间的数据交互\"><a class=\"markdownIt-Anchor\" href=\"#4方法四vuex处理组件之间的数据交互\">#</a> 4. 方法四：<strong>vuex 处理组件之间的数据交互</strong></h3>\n<p>​\t如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候才有上面这一些方法可能不利于项目的维护，vuex 的做法就是将这一些公共的数据抽离出来，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。</p>\n<h3 id=\"5方法五中央事件总线\"><a class=\"markdownIt-Anchor\" href=\"#5方法五中央事件总线\">#</a> 5. 方法五：<strong>中央事件总线</strong></h3>\n<p>​\t如果两个组件不是父子关系呢？这种情况下可以使用中央事件总线的方式。新建一个 Vue 事件 bus 对象，然后通过 bus.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>m</mi><mi>i</mi><mi>t</mi><mtext>触发事件，</mtext><mi>b</mi><mi>u</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">emit触发事件，bus.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">触</span><span class=\"mord cjk_fallback\">发</span><span class=\"mord cjk_fallback\">事</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span></span></span></span>on 监听触发的事件。</p>\n<blockquote>\n<p>公共事件总线 eventBus 的实质就是创建一个 vue 实例，通过一个空的 vue 实例作为桥梁实现 vue 组件间的通信。它是实现非父子组件通信的一种解决方案。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--兄弟组件A--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;this is brother1 compoent!&lt;/p&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @input=&quot;passData(mymessage)&quot;&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">    name: &#x27;brother1&#x27;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        mymessage:&#x27;hello brother1&#x27;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      passData(val)&#123;</span><br><span class=\"line\">        //触发全局事件globalEvent</span><br><span class=\"line\">        bus.$emit(&#x27;globalEvent&#x27;, val)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--兄弟组件B--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;this is brother2 compoent!&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;brother1传递过来的数据：&#123;&#123;brothermessage&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">    name: &#x27;brother2&#x27;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        brothermessage:&#x27;&#x27;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted()&#123;</span><br><span class=\"line\">      //绑定全局事件globalEvent</span><br><span class=\"line\">      bus.$on(&#x27;globalEvent&#x27;,(val)=&gt;&#123;</span><br><span class=\"line\">        this.brothermessage = val;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//中央事件总线</span><br><span class=\"line\">var bus=new Vue();</span><br><span class=\"line\">var app=new Vue(&#123;</span><br><span class=\"line\">  el:&#x27;#app&#x27;,</span><br><span class=\"line\">  template:`</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;brother1&gt;&lt;/brother1&gt;</span><br><span class=\"line\">      &lt;brother2&gt;&lt;/brother2&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  `,</span><br><span class=\"line\">   beforeDestroy()&#123;</span><br><span class=\"line\">sd     bus.$off(&#x27;globalEvent&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6方法六parent和children\"><a class=\"markdownIt-Anchor\" href=\"#6方法六parent和children\">#</a> 6. 方法六：<strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>∗</mo><mo>∗</mo><mtext>和</mtext><mo>∗</mo><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">parent**和**</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80952em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">∗</span><span class=\"mord cjk_fallback\">和</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">∗</span></span></span></span>children</strong></h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#x27;child&#x27;,&#123;</span><br><span class=\"line\">  props:&#123;</span><br><span class=\"line\">    value:String, //v-model会自动传递一个字段为value的prop属性</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      mymessage:this.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    changeValue()&#123;</span><br><span class=\"line\">      this.$parent.message = this.mymessage;//通过如此调用可以改变父组件的值</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template:`</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @change=&quot;changeValue&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;`</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">Vue.component(&#x27;parent&#x27;,&#123;</span><br><span class=\"line\">  template:`</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;this is parent compoent!&lt;/p&gt;</span><br><span class=\"line\">      &lt;button @click=&quot;changeChildValue&quot;&gt;test&lt;/button &gt;</span><br><span class=\"line\">      &lt;child&gt;&lt;/child&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  `,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    changeChildValue()&#123;</span><br><span class=\"line\">      this.$children[0].mymessage = &#x27;hello&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      message:&#x27;hello&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">var app=new Vue(&#123;</span><br><span class=\"line\">  el:&#x27;#app&#x27;,</span><br><span class=\"line\">  template:`</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;parent&gt;&lt;/parent&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  `</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>",
            "tags": [
                "vue"
            ]
        },
        {
            "id": "http://example.com/2020/11/18/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/",
            "url": "http://example.com/2020/11/18/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/",
            "title": "vue项目打包优化策略",
            "date_published": "2020-11-18T14:26:13.000Z",
            "content_html": "<p>使用 vue-cli 部署生产包时，发现资源包很大，打包后的 <code>vendor.js</code>  达到了 1.4M，这已经很大了，而且会影响到首屏加载。那么，怎么优化呢？</p>\n<h3 id=\"1组件按需加载\"><a class=\"markdownIt-Anchor\" href=\"#1组件按需加载\">#</a> 1. 组件按需加载</h3>\n<p>这是首先可以优化的点。如果频繁使用了第三方组件 / UI 库，如我的项目中经常同时使用了 element-ui, mint-ui,echarts 等组件库，如果全部引入，项目体积非常大，这时可以按需引入组件。</p>\n<p>示例如下：</p>\n<h4 id=\"11-element-ui\"><a class=\"markdownIt-Anchor\" href=\"#11-element-ui\">#</a> 1.1 element-ui</h4>\n<p>首先，安装 babel-plugin-component：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-plugin-component -D</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>然后，将.babelrc 修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.js</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import &#123; Dialog, Loading &#125; from &#x27;element-ui&#x27;</span><br><span class=\"line\">Vue.use(Dialog)</span><br><span class=\"line\">Vue.use(Loading.directive)</span><br><span class=\"line\">Vue.prototype.$loading = Loading.service</span><br><span class=\"line\">// 然后正常使用组件</span><br></pre></td></tr></table></figure>\n<h4 id=\"12-mint-ui\"><a class=\"markdownIt-Anchor\" href=\"#12-mint-ui\">#</a> 1.2 mint-ui</h4>\n<p>由于 mint-ui 是 element-ui 的移动端组件，所以它的使用和引入几乎和 element-ui 一样。</p>\n<p>首先，安装 babel-plugin-component：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-plugin-component -D</span><br></pre></td></tr></table></figure>\n<p>然后，将.babelrc 修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [</span><br><span class=\"line\">    [&quot;es2015&quot;, &#123; &quot;modules&quot;: false &#125;]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;plugins&quot;: [[&quot;component&quot;, [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;libraryName&quot;: &quot;mint-ui&quot;,</span><br><span class=\"line\">      &quot;style&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]]]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后引入部分组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.js</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import &#123; Toast, MessageBox &#125; from &#x27;element-ui&#x27;</span><br><span class=\"line\">Vue.use(Dialog)</span><br><span class=\"line\">Vue.use(Loading.directive)</span><br><span class=\"line\">Vue.prototype.$loading = Loading.service</span><br><span class=\"line\">// 然后正常使用组件</span><br></pre></td></tr></table></figure>\n<p>注意，element-ui 和 mint-ui 不能同时在.babelrc 中进行插件设置，这种情况下，依然可以按需引入，但是不要在 <code>.babelrc</code>  中配置，在引入的地方同时引入 css 即可。</p>\n<h4 id=\"13-echarts\"><a class=\"markdownIt-Anchor\" href=\"#13-echarts\">#</a> 1.3 echarts</h4>\n<p>首先安装 babel-plugin-equire</p>\n<p>npm i babel-plugin-equire -D</p>\n<p>然后，在 <code>.babelrc</code>  文件中添加该插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;plugins&quot;: [</span><br><span class=\"line\">       // other plugins</span><br><span class=\"line\">       ...</span><br><span class=\"line\">       </span><br><span class=\"line\">    &quot;equire&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个 js 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// echarts.js</span><br><span class=\"line\">// eslint-disable-next-line</span><br><span class=\"line\">const echarts = equire([</span><br><span class=\"line\">  &#x27;tooltip&#x27;,</span><br><span class=\"line\">  &#x27;candlestick&#x27;,</span><br><span class=\"line\">  &#x27;bar&#x27;,</span><br><span class=\"line\">  &#x27;line&#x27;,</span><br><span class=\"line\">  &#x27;axisPointer&#x27;,</span><br><span class=\"line\">  &#x27;legend&#x27;,</span><br><span class=\"line\">  &#x27;grid&#x27;</span><br><span class=\"line\">])</span><br><span class=\"line\">export default echarts</span><br><span class=\"line\">// 业务组件，引入echarts</span><br><span class=\"line\">import echarts from &#x27;@/assets/lib/echarts&#x27;</span><br><span class=\"line\">// 使用与以前一样</span><br></pre></td></tr></table></figure>\n<p>按需加载 echarts</p>\n<p>解决 vue-cli 首屏加载慢的问题</p>\n<h3 id=\"2路由懒加载\"><a class=\"markdownIt-Anchor\" href=\"#2路由懒加载\">#</a> 2. 路由懒加载</h3>\n<p>这里需要一个插件</p>\n<p>vue-router 官方推荐 syntax-dynamic-import 插件，不过它要求同时安装 @bable/core^7.0.0，如果你安装了 babel-core6，是会有版本冲突的。我的做法如下</p>\n<p>npm install babel-plugin-syntax-dynamic-import --save-dev(^6.18.0)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// router.js</span><br><span class=\"line\">const login = () =&gt; import(&#x27;@/components/login&#x27;)</span><br><span class=\"line\">const router = new VueRouter(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123; path: &#x27;/login&#x27;, component: login &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>还有一种魔法注释用法</p>\n<p>有时候我们想把某个路由下的所有组件都打包在同个异步块 (chunk) 中。只需要使用 命名 chunk，一个特殊的注释语法来提供 chunk name (需要 Webpack &gt; 2.4)。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Foo = () =&gt; import(/* webpackChunkName: &quot;group-foo&quot; */ &#x27;./Foo.vue&#x27;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3异步组件\"><a class=\"markdownIt-Anchor\" href=\"#3异步组件\">#</a> 3. 异步组件</h3>\n<p>如果组件在页面加载时不需要，只在调用时用到，这时可以使用异步组件的写法。仅仅是引入和组件注册写法不同</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// template</span><br><span class=\"line\">&lt;test v-if=&quot;showTest&quot;&gt;&lt;/test&gt;</span><br><span class=\"line\">// script</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    test: () =&gt; import(&#x27;./test&#x27;) // 将组件异步引入，告诉webpack，将该部分代码分割打包</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">      clickTest () &#123;</span><br><span class=\"line\">          this.showTest = !this.showTest</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4图片的压缩合并\"><a class=\"markdownIt-Anchor\" href=\"#4图片的压缩合并\">#</a> 4. 图片的压缩合并</h3>\n<p>如有可能，将图片制作成精灵图</p>\n<h3 id=\"5cdn加速\"><a class=\"markdownIt-Anchor\" href=\"#5cdn加速\">#</a> 5.CDN 加速</h3>\n<p>在 index.html 中引入 cdn 资源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;!-- built files will be auto injected --&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://cdn.bootcss.com/vue/2.5.2/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://cdn.bootcss.com/vuex/3.0.1/vuex.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://cdn.bootcss.com/vue-resource/1.5.1/vue-resource.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>修改 build/webpack.base.conf.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  context: path.resolve(__dirname, &#x27;../&#x27;),</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: &#x27;./src/main.js&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  externals:&#123;</span><br><span class=\"line\">    &#x27;vue&#x27;: &#x27;Vue&#x27;,</span><br><span class=\"line\">    &#x27;vue-router&#x27;: &#x27;VueRouter&#x27;,</span><br><span class=\"line\">    &#x27;vuex&#x27;:&#x27;Vuex&#x27;,</span><br><span class=\"line\">    &#x27;vue-resource&#x27;: &#x27;VueResource&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 src/main.js src/router/index.js 注释掉 import 引入的 vue,vue-resource</p>\n<p>// import Vue from ‘vue’</p>\n<p>// import VueResource from ‘vue-resource’</p>\n<p>// Vue.use(VueResource)</p>\n<h3 id=\"6压缩代码\"><a class=\"markdownIt-Anchor\" href=\"#6压缩代码\">#</a> 6. 压缩代码</h3>\n<p>vue-cli 已经使用 UglifyJsPlugin 插件来压缩代码，可以设置成如下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">  compress: &#123;</span><br><span class=\"line\">    warnings: false,</span><br><span class=\"line\">    drop_console: true,</span><br><span class=\"line\">    pure_funcs: [&#x27;console.log&#x27;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  sourceMap: false</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中 sourceMap: false 是禁用除错功能。</p>\n<p>如果设为 true，在部署包中会生成.map 结尾的 js 文件。它用于在代码混淆压缩的情况下仍可进行调试。这个功能虽好，但会大大增加整体资源包的体积，所以将其禁用。</p>\n",
            "tags": [
                "vue",
                "webpack"
            ]
        }
    ]
}